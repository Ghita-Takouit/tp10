<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.restclient&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.restclient&quot;&#10;        minSdk = 28&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;), &quot;proguard-rules.pro&quot;)&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Material Components et vues XML traditionnelles&#10;    implementation(&quot;com.google.android.material:material:1.11.0&quot;)&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;)&#10;    implementation(&quot;androidx.coordinatorlayout:coordinatorlayout:1.2.0&quot;)&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;&#10;    // Retrofit&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;org.simpleframework:simple-xml:2.7.1&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-simplexml:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-jaxb:2.9.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;ma.projet.restclient&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;ma.projet.restclient&quot;&#10;        minSdk = 28&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;), &quot;proguard-rules.pro&quot;)&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Material Components et vues XML traditionnelles&#10;    implementation(&quot;com.google.android.material:material:1.11.0&quot;)&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;)&#10;    implementation(&quot;androidx.coordinatorlayout:coordinatorlayout:1.2.0&quot;)&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;&#10;    // Retrofit&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;org.simpleframework:simple-xml:2.7.1&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-simplexml:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-jaxb:2.9.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ma/projet/restclient/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ma/projet/restclient/MainActivity.java" />
              <option name="originalContent" value="package ma.projet.restclient;&#10;&#10;import android.content.DialogInterface;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.RadioGroup;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import ma.projet.restclient.adapter.CompteAdapter;&#10;import ma.projet.restclient.entities.Compte;&#10;import ma.projet.restclient.repository.CompteRepository;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.example.restclient.R;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Calendar;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class MainActivity extends AppCompatActivity implements CompteAdapter.OnDeleteClickListener, CompteAdapter.OnUpdateClickListener {&#10;    private RecyclerView recyclerView;&#10;    private CompteAdapter adapter;&#10;    private RadioGroup formatGroup;&#10;    private FloatingActionButton addbtn;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        initViews();&#10;        setupRecyclerView();&#10;        setupFormatSelection();&#10;        setupAddButton();&#10;&#10;        loadData(&quot;JSON&quot;);&#10;    }&#10;&#10;    private void initViews() {&#10;        recyclerView = findViewById(R.id.recyclerView);&#10;        formatGroup = findViewById(R.id.formatGroup);&#10;        addbtn = findViewById(R.id.fabAdd);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        adapter = new CompteAdapter(this, this);&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    private void setupFormatSelection() {&#10;        formatGroup.setOnCheckedChangeListener((group, checkedId) -&gt; {&#10;            String format = checkedId == R.id.radioJson ? &quot;JSON&quot; : &quot;XML&quot;;&#10;            loadData(format);&#10;        });&#10;    }&#10;&#10;    private void setupAddButton() {&#10;        addbtn.setOnClickListener(v -&gt; showAddCompteDialog());&#10;    }&#10;&#10;    private void showAddCompteDialog() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);&#10;        View dialogView = getLayoutInflater().inflate(R.layout.dialog_add_compte, null);&#10;&#10;        EditText etSolde = dialogView.findViewById(R.id.etSolde);&#10;        RadioGroup typeGroup = dialogView.findViewById(R.id.typeGroup);&#10;&#10;        builder.setView(dialogView)&#10;            .setTitle(&quot;Ajouter un compte&quot;)&#10;            .setPositiveButton(&quot;Ajouter&quot;, (dialog, which) -&gt; {&#10;                String solde = etSolde.getText().toString();&#10;                String type = typeGroup.getCheckedRadioButtonId() == R.id.radioCourant&#10;                    ? &quot;COURANT&quot; : &quot;EPARGNE&quot;;&#10;&#10;                String formattedDate = getCurrentDateFormatted();&#10;                Compte compte = new Compte(null, Double.parseDouble(solde), type, formattedDate);&#10;                addCompte(compte);&#10;            })&#10;            .setNegativeButton(&quot;Annuler&quot;, null);&#10;&#10;        AlertDialog dialog = builder.create();&#10;        dialog.show();&#10;    }&#10;&#10;    private String getCurrentDateFormatted() {&#10;        Calendar calendar = Calendar.getInstance();&#10;        SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#10;        return formatter.format(calendar.getTime());&#10;    }&#10;&#10;    private void addCompte(Compte compte) {&#10;        CompteRepository compteRepository = new CompteRepository(&quot;JSON&quot;);&#10;        compteRepository.addCompte(compte, new Callback&lt;Compte&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Compte&gt; call, Response&lt;Compte&gt; response) {&#10;                if (response.isSuccessful()) {&#10;                    showToast(&quot;Compte ajouté&quot;);&#10;                    loadData(&quot;JSON&quot;);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Compte&gt; call, Throwable t) {&#10;                showToast(&quot;Erreur lors de l'ajout&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadData(String format) {&#10;        CompteRepository compteRepository = new CompteRepository(format);&#10;        compteRepository.getAllCompte(new Callback&lt;List&lt;Compte&gt;&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;List&lt;Compte&gt;&gt; call, Response&lt;List&lt;Compte&gt;&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    List&lt;Compte&gt; comptes = response.body();&#10;                    runOnUiThread(() -&gt; adapter.updateData(comptes));&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;List&lt;Compte&gt;&gt; call, Throwable t) {&#10;                showToast(&quot;Erreur: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onUpdateClick(Compte compte) {&#10;        showUpdateCompteDialog(compte);&#10;    }&#10;&#10;    private void showUpdateCompteDialog(Compte compte) {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);&#10;        View dialogView = getLayoutInflater().inflate(R.layout.dialog_add_compte, null);&#10;&#10;        EditText etSolde = dialogView.findViewById(R.id.etSolde);&#10;        RadioGroup typeGroup = dialogView.findViewById(R.id.typeGroup);&#10;        etSolde.setText(String.valueOf(compte.getSolde()));&#10;        if (compte.getType().equalsIgnoreCase(&quot;COURANT&quot;)) {&#10;            typeGroup.check(R.id.radioCourant);&#10;        } else if (compte.getType().equalsIgnoreCase(&quot;EPARGNE&quot;)) {&#10;            typeGroup.check(R.id.radioEpargne);&#10;        }&#10;&#10;        builder.setView(dialogView)&#10;            .setTitle(&quot;Modifier un compte&quot;)&#10;            .setPositiveButton(&quot;Modifier&quot;, (dialog, which) -&gt; {&#10;                String solde = etSolde.getText().toString();&#10;                String type = typeGroup.getCheckedRadioButtonId() == R.id.radioCourant&#10;                    ? &quot;COURANT&quot; : &quot;EPARGNE&quot;;&#10;                compte.setSolde(Double.parseDouble(solde));&#10;                compte.setType(type);&#10;                updateCompte(compte);&#10;            })&#10;            .setNegativeButton(&quot;Annuler&quot;, null);&#10;&#10;        AlertDialog dialog = builder.create();&#10;        dialog.show();&#10;    }&#10;&#10;    private void updateCompte(Compte compte) {&#10;        CompteRepository compteRepository = new CompteRepository(&quot;JSON&quot;);&#10;        compteRepository.updateCompte(compte.getId(), compte, new Callback&lt;Compte&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Compte&gt; call, Response&lt;Compte&gt; response) {&#10;                if (response.isSuccessful()) {&#10;                    showToast(&quot;Compte modifié&quot;);&#10;                    loadData(&quot;JSON&quot;);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Compte&gt; call, Throwable t) {&#10;                showToast(&quot;Erreur lors de la modification&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onDeleteClick(Compte compte) {&#10;        showDeleteConfirmationDialog(compte);&#10;    }&#10;&#10;    private void showDeleteConfirmationDialog(Compte compte) {&#10;        new AlertDialog.Builder(this)&#10;            .setTitle(&quot;Confirmation&quot;)&#10;            .setMessage(&quot;Voulez-vous vraiment supprimer ce compte ?&quot;)&#10;            .setPositiveButton(&quot;Oui&quot;, (dialog, which) -&gt; deleteCompte(compte))&#10;            .setNegativeButton(&quot;Non&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    private void deleteCompte(Compte compte) {&#10;        CompteRepository compteRepository = new CompteRepository(&quot;JSON&quot;);&#10;        compteRepository.deleteCompte(compte.getId(), new Callback&lt;Void&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Void&gt; call, Response&lt;Void&gt; response) {&#10;                if (response.isSuccessful()) {&#10;                    showToast(&quot;Compte supprimé&quot;);&#10;                    loadData(&quot;JSON&quot;);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Void&gt; call, Throwable t) {&#10;                showToast(&quot;Erreur lors de la suppression&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showToast(String message) {&#10;        runOnUiThread(() -&gt; Toast.makeText(MainActivity.this, message, Toast.LENGTH_LONG).show());&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package ma.projet.restclient;&#10;&#10;import android.content.DialogInterface;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.RadioGroup;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import ma.projet.restclient.adapter.CompteAdapter;&#10;import ma.projet.restclient.entities.Compte;&#10;import ma.projet.restclient.repository.CompteRepository;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import ma.projet.restclient.R;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Calendar;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class MainActivity extends AppCompatActivity implements CompteAdapter.OnDeleteClickListener, CompteAdapter.OnUpdateClickListener {&#10;    private RecyclerView recyclerView;&#10;    private CompteAdapter adapter;&#10;    private RadioGroup formatGroup;&#10;    private FloatingActionButton addbtn;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        initViews();&#10;        setupRecyclerView();&#10;        setupFormatSelection();&#10;        setupAddButton();&#10;&#10;        loadData(&quot;JSON&quot;);&#10;    }&#10;&#10;    private void initViews() {&#10;        recyclerView = findViewById(R.id.recyclerView);&#10;        formatGroup = findViewById(R.id.formatGroup);&#10;        addbtn = findViewById(R.id.fabAdd);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        adapter = new CompteAdapter(this, this);&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    private void setupFormatSelection() {&#10;        formatGroup.setOnCheckedChangeListener((group, checkedId) -&gt; {&#10;            String format = checkedId == R.id.radioJson ? &quot;JSON&quot; : &quot;XML&quot;;&#10;            loadData(format);&#10;        });&#10;    }&#10;&#10;    private void setupAddButton() {&#10;        addbtn.setOnClickListener(v -&gt; showAddCompteDialog());&#10;    }&#10;&#10;    private void showAddCompteDialog() {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);&#10;        View dialogView = getLayoutInflater().inflate(R.layout.dialog_add_compte, null);&#10;&#10;        EditText etSolde = dialogView.findViewById(R.id.etSolde);&#10;        RadioGroup typeGroup = dialogView.findViewById(R.id.typeGroup);&#10;&#10;        builder.setView(dialogView)&#10;            .setTitle(&quot;Ajouter un compte&quot;)&#10;            .setPositiveButton(&quot;Ajouter&quot;, (dialog, which) -&gt; {&#10;                String solde = etSolde.getText().toString();&#10;                String type = typeGroup.getCheckedRadioButtonId() == R.id.radioCourant&#10;                    ? &quot;COURANT&quot; : &quot;EPARGNE&quot;;&#10;&#10;                String formattedDate = getCurrentDateFormatted();&#10;                Compte compte = new Compte(null, Double.parseDouble(solde), type, formattedDate);&#10;                addCompte(compte);&#10;            })&#10;            .setNegativeButton(&quot;Annuler&quot;, null);&#10;&#10;        AlertDialog dialog = builder.create();&#10;        dialog.show();&#10;    }&#10;&#10;    private String getCurrentDateFormatted() {&#10;        Calendar calendar = Calendar.getInstance();&#10;        SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#10;        return formatter.format(calendar.getTime());&#10;    }&#10;&#10;    private void addCompte(Compte compte) {&#10;        CompteRepository compteRepository = new CompteRepository(&quot;JSON&quot;);&#10;        compteRepository.addCompte(compte, new Callback&lt;Compte&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Compte&gt; call, Response&lt;Compte&gt; response) {&#10;                if (response.isSuccessful()) {&#10;                    showToast(&quot;Compte ajouté&quot;);&#10;                    loadData(&quot;JSON&quot;);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Compte&gt; call, Throwable t) {&#10;                showToast(&quot;Erreur lors de l'ajout&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadData(String format) {&#10;        CompteRepository compteRepository = new CompteRepository(format);&#10;        compteRepository.getAllCompte(new Callback&lt;List&lt;Compte&gt;&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;List&lt;Compte&gt;&gt; call, Response&lt;List&lt;Compte&gt;&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    List&lt;Compte&gt; comptes = response.body();&#10;                    runOnUiThread(() -&gt; adapter.updateData(comptes));&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;List&lt;Compte&gt;&gt; call, Throwable t) {&#10;                showToast(&quot;Erreur: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onUpdateClick(Compte compte) {&#10;        showUpdateCompteDialog(compte);&#10;    }&#10;&#10;    private void showUpdateCompteDialog(Compte compte) {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);&#10;        View dialogView = getLayoutInflater().inflate(R.layout.dialog_add_compte, null);&#10;&#10;        EditText etSolde = dialogView.findViewById(R.id.etSolde);&#10;        RadioGroup typeGroup = dialogView.findViewById(R.id.typeGroup);&#10;        etSolde.setText(String.valueOf(compte.getSolde()));&#10;        if (compte.getType().equalsIgnoreCase(&quot;COURANT&quot;)) {&#10;            typeGroup.check(R.id.radioCourant);&#10;        } else if (compte.getType().equalsIgnoreCase(&quot;EPARGNE&quot;)) {&#10;            typeGroup.check(R.id.radioEpargne);&#10;        }&#10;&#10;        builder.setView(dialogView)&#10;            .setTitle(&quot;Modifier un compte&quot;)&#10;            .setPositiveButton(&quot;Modifier&quot;, (dialog, which) -&gt; {&#10;                String solde = etSolde.getText().toString();&#10;                String type = typeGroup.getCheckedRadioButtonId() == R.id.radioCourant&#10;                    ? &quot;COURANT&quot; : &quot;EPARGNE&quot;;&#10;                compte.setSolde(Double.parseDouble(solde));&#10;                compte.setType(type);&#10;                updateCompte(compte);&#10;            })&#10;            .setNegativeButton(&quot;Annuler&quot;, null);&#10;&#10;        AlertDialog dialog = builder.create();&#10;        dialog.show();&#10;    }&#10;&#10;    private void updateCompte(Compte compte) {&#10;        CompteRepository compteRepository = new CompteRepository(&quot;JSON&quot;);&#10;        compteRepository.updateCompte(compte.getId(), compte, new Callback&lt;Compte&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Compte&gt; call, Response&lt;Compte&gt; response) {&#10;                if (response.isSuccessful()) {&#10;                    showToast(&quot;Compte modifié&quot;);&#10;                    loadData(&quot;JSON&quot;);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Compte&gt; call, Throwable t) {&#10;                showToast(&quot;Erreur lors de la modification&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onDeleteClick(Compte compte) {&#10;        showDeleteConfirmationDialog(compte);&#10;    }&#10;&#10;    private void showDeleteConfirmationDialog(Compte compte) {&#10;        new AlertDialog.Builder(this)&#10;            .setTitle(&quot;Confirmation&quot;)&#10;            .setMessage(&quot;Voulez-vous vraiment supprimer ce compte ?&quot;)&#10;            .setPositiveButton(&quot;Oui&quot;, (dialog, which) -&gt; deleteCompte(compte))&#10;            .setNegativeButton(&quot;Non&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    private void deleteCompte(Compte compte) {&#10;        CompteRepository compteRepository = new CompteRepository(&quot;JSON&quot;);&#10;        compteRepository.deleteCompte(compte.getId(), new Callback&lt;Void&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;Void&gt; call, Response&lt;Void&gt; response) {&#10;                if (response.isSuccessful()) {&#10;                    showToast(&quot;Compte supprimé&quot;);&#10;                    loadData(&quot;JSON&quot;);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;Void&gt; call, Throwable t) {&#10;                showToast(&quot;Erreur lors de la suppression&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showToast(String message) {&#10;        runOnUiThread(() -&gt; Toast.makeText(MainActivity.this, message, Toast.LENGTH_LONG).show());&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ma/projet/restclient/adapter/CompteAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ma/projet/restclient/adapter/CompteAdapter.java" />
              <option name="originalContent" value="package ma.projet.restclient.adapter;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.restclient.R;&#10;import ma.projet.restclient.entities.Compte;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CompteAdapter extends RecyclerView.Adapter&lt;CompteAdapter.CompteViewHolder&gt; {&#10;    public interface OnDeleteClickListener {&#10;        void onDeleteClick(Compte compte);&#10;    }&#10;    public interface OnUpdateClickListener {&#10;        void onUpdateClick(Compte compte);&#10;    }&#10;&#10;    private List&lt;Compte&gt; comptes;&#10;    private OnDeleteClickListener onDeleteClickListener;&#10;    private OnUpdateClickListener onUpdateClickListener;&#10;&#10;    public CompteAdapter(OnDeleteClickListener onDeleteClickListener, OnUpdateClickListener onUpdateClickListener) {&#10;        this.comptes = new ArrayList&lt;&gt;();&#10;        this.onDeleteClickListener = onDeleteClickListener;&#10;        this.onUpdateClickListener = onUpdateClickListener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public CompteViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;            .inflate(R.layout.item_compte, parent, false);&#10;        return new CompteViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull CompteViewHolder holder, int position) {&#10;        Compte compte = comptes.get(position);&#10;        holder.bind(compte);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return comptes.size();&#10;    }&#10;&#10;    public void updateData(List&lt;Compte&gt; newComptes) {&#10;        this.comptes.clear();&#10;        this.comptes.addAll(newComptes);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    class CompteViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvId, tvSolde, tvType, tvDate;&#10;        private View btnDelete, btnUpdate;&#10;&#10;        public CompteViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvId = itemView.findViewById(R.id.tvId);&#10;            tvSolde = itemView.findViewById(R.id.tvSolde);&#10;            tvType = itemView.findViewById(R.id.tvType);&#10;            tvDate = itemView.findViewById(R.id.tvDate);&#10;            btnDelete = itemView.findViewById(R.id.btnDelete);&#10;            btnUpdate = itemView.findViewById(R.id.btnEdit);&#10;        }&#10;&#10;        public void bind(Compte compte) {&#10;            tvId.setText(&quot;ID: &quot; + compte.getId());&#10;            tvSolde.setText(String.format(&quot;Solde: %.2f&quot;, compte.getSolde()));&#10;            tvType.setText(&quot;Type: &quot; + compte.getType());&#10;            tvDate.setText(&quot;Date: &quot; + compte.getDateCreation());&#10;&#10;            btnDelete.setOnClickListener(v -&gt; {&#10;                if (onDeleteClickListener != null) {&#10;                    onDeleteClickListener.onDeleteClick(compte);&#10;                }&#10;            });&#10;            btnUpdate.setOnClickListener(v -&gt; {&#10;                if (onUpdateClickListener != null) {&#10;                    onUpdateClickListener.onUpdateClick(compte);&#10;                }&#10;            });&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package ma.projet.restclient.adapter;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import ma.projet.restclient.R;&#10;import ma.projet.restclient.entities.Compte;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CompteAdapter extends RecyclerView.Adapter&lt;CompteAdapter.CompteViewHolder&gt; {&#10;    public interface OnDeleteClickListener {&#10;        void onDeleteClick(Compte compte);&#10;    }&#10;    public interface OnUpdateClickListener {&#10;        void onUpdateClick(Compte compte);&#10;    }&#10;&#10;    private List&lt;Compte&gt; comptes;&#10;    private OnDeleteClickListener onDeleteClickListener;&#10;    private OnUpdateClickListener onUpdateClickListener;&#10;&#10;    public CompteAdapter(OnDeleteClickListener onDeleteClickListener, OnUpdateClickListener onUpdateClickListener) {&#10;        this.comptes = new ArrayList&lt;&gt;();&#10;        this.onDeleteClickListener = onDeleteClickListener;&#10;        this.onUpdateClickListener = onUpdateClickListener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public CompteViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;            .inflate(R.layout.item_compte, parent, false);&#10;        return new CompteViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull CompteViewHolder holder, int position) {&#10;        Compte compte = comptes.get(position);&#10;        holder.bind(compte);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return comptes.size();&#10;    }&#10;&#10;    public void updateData(List&lt;Compte&gt; newComptes) {&#10;        this.comptes.clear();&#10;        this.comptes.addAll(newComptes);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    class CompteViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvId, tvSolde, tvType, tvDate;&#10;        private View btnDelete, btnUpdate;&#10;&#10;        public CompteViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvId = itemView.findViewById(R.id.tvId);&#10;            tvSolde = itemView.findViewById(R.id.tvSolde);&#10;            tvType = itemView.findViewById(R.id.tvType);&#10;            tvDate = itemView.findViewById(R.id.tvDate);&#10;            btnDelete = itemView.findViewById(R.id.btnDelete);&#10;            btnUpdate = itemView.findViewById(R.id.btnEdit);&#10;        }&#10;&#10;        public void bind(Compte compte) {&#10;            tvId.setText(&quot;ID: &quot; + compte.getId());&#10;            tvSolde.setText(String.format(&quot;Solde: %.2f&quot;, compte.getSolde()));&#10;            tvType.setText(&quot;Type: &quot; + compte.getType());&#10;            tvDate.setText(&quot;Date: &quot; + compte.getDateCreation());&#10;&#10;            btnDelete.setOnClickListener(v -&gt; {&#10;                if (onDeleteClickListener != null) {&#10;                    onDeleteClickListener.onDeleteClick(compte);&#10;                }&#10;            });&#10;            btnUpdate.setOnClickListener(v -&gt; {&#10;                if (onUpdateClickListener != null) {&#10;                    onUpdateClickListener.onUpdateClick(compte);&#10;                }&#10;            });&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>